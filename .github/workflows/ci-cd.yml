name: Angular Movie App CI/CD

on:
  push:
    branches: [ dev, master ]
  pull_request_target:
    branches: [ dev, master ]

env:
  NODE_VERSION: '18'
  TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Linting and Unit Tests
  test-and-lint:
    name: 'Lint & Test'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 2: Build Check
  build-check:
    name: 'Build Check'
    runs-on: ubuntu-latest
    needs: test-and-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # Job 3: Deploy to Vercel Production
  deploy:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [test-and-lint, build-check]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build for production
        run: npm run build
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

      - name: Deploy to Vercel (Production)
        run: |
          npm install --global vercel@latest
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Job 4: Preview Deploy using Vercel CLI
  preview-deploy:
    name: 'Preview Deploy'
    runs-on: ubuntu-latest
    needs: [test-and-lint, build-check]
    if: github.ref != 'refs/heads/master' && github.event_name != 'pull_request_target'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build for preview
        run: npm run build
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}

      - name: Deploy Preview to Vercel using CLI
        run: |
          npm install --global vercel@latest
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
